// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ArtistEntities.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MusicMicroservice {

  /// <summary>Holder for reflection information generated from ArtistEntities.proto</summary>
  public static partial class ArtistEntitiesReflection {

    #region Descriptor
    /// <summary>File descriptor for ArtistEntities.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ArtistEntitiesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRBcnRpc3RFbnRpdGllcy5wcm90byJfChFHZXRBcnRpc3RzUmVxdWVzdBIR",
            "CglsaWJyYXJ5SWQYASABKAkSEQoJcGFnZUluZGV4GAIgASgFEhAKCHBhZ2VT",
            "aXplGAMgASgFEhIKCnNlYXJjaFRleHQYBCABKAkiNQoSR2V0QXJ0aXN0c1Jl",
            "c3BvbnNlEh8KB2FydGlzdHMYASADKAsyDi5BcnRpc3RNZXNzYWdlIlwKDUFy",
            "dGlzdE1lc3NhZ2USCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRISCgp1cmxQ",
            "aWN0dXJlGAMgASgJEh0KBmFsYnVtcxgEIAMoCzINLkFsYnVtTWVzc2FnZSJf",
            "CgxBbGJ1bU1lc3NhZ2USCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRISCgp1",
            "cmxQaWN0dXJlGAMgASgJEiEKBXNvbmdzGAQgAygLMhIuU29uZ1NpbXBsZU1l",
            "c3NhZ2UiTwoRU29uZ1NpbXBsZU1lc3NhZ2USCgoCaWQYASABKAkSDAoEbmFt",
            "ZRgCIAEoCRILCgN1cmwYAyABKAkSEwoLaXNJbkxpYnJhcnkYBCABKAhCFKoC",
            "EU11c2ljTWljcm9zZXJ2aWNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MusicMicroservice.GetArtistsRequest), global::MusicMicroservice.GetArtistsRequest.Parser, new[]{ "LibraryId", "PageIndex", "PageSize", "SearchText" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MusicMicroservice.GetArtistsResponse), global::MusicMicroservice.GetArtistsResponse.Parser, new[]{ "Artists" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MusicMicroservice.ArtistMessage), global::MusicMicroservice.ArtistMessage.Parser, new[]{ "Id", "Name", "UrlPicture", "Albums" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MusicMicroservice.AlbumMessage), global::MusicMicroservice.AlbumMessage.Parser, new[]{ "Id", "Name", "UrlPicture", "Songs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MusicMicroservice.SongSimpleMessage), global::MusicMicroservice.SongSimpleMessage.Parser, new[]{ "Id", "Name", "Url", "IsInLibrary" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetArtistsRequest : pb::IMessage<GetArtistsRequest> {
    private static readonly pb::MessageParser<GetArtistsRequest> _parser = new pb::MessageParser<GetArtistsRequest>(() => new GetArtistsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetArtistsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MusicMicroservice.ArtistEntitiesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArtistsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArtistsRequest(GetArtistsRequest other) : this() {
      libraryId_ = other.libraryId_;
      pageIndex_ = other.pageIndex_;
      pageSize_ = other.pageSize_;
      searchText_ = other.searchText_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArtistsRequest Clone() {
      return new GetArtistsRequest(this);
    }

    /// <summary>Field number for the "libraryId" field.</summary>
    public const int LibraryIdFieldNumber = 1;
    private string libraryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LibraryId {
      get { return libraryId_; }
      set {
        libraryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pageIndex" field.</summary>
    public const int PageIndexFieldNumber = 2;
    private int pageIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageIndex {
      get { return pageIndex_; }
      set {
        pageIndex_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private int pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "searchText" field.</summary>
    public const int SearchTextFieldNumber = 4;
    private string searchText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchText {
      get { return searchText_; }
      set {
        searchText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetArtistsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetArtistsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LibraryId != other.LibraryId) return false;
      if (PageIndex != other.PageIndex) return false;
      if (PageSize != other.PageSize) return false;
      if (SearchText != other.SearchText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LibraryId.Length != 0) hash ^= LibraryId.GetHashCode();
      if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (SearchText.Length != 0) hash ^= SearchText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LibraryId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LibraryId);
      }
      if (PageIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageIndex);
      }
      if (PageSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PageSize);
      }
      if (SearchText.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SearchText);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LibraryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LibraryId);
      }
      if (PageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageIndex);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (SearchText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SearchText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetArtistsRequest other) {
      if (other == null) {
        return;
      }
      if (other.LibraryId.Length != 0) {
        LibraryId = other.LibraryId;
      }
      if (other.PageIndex != 0) {
        PageIndex = other.PageIndex;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      if (other.SearchText.Length != 0) {
        SearchText = other.SearchText;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LibraryId = input.ReadString();
            break;
          }
          case 16: {
            PageIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PageSize = input.ReadInt32();
            break;
          }
          case 34: {
            SearchText = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetArtistsResponse : pb::IMessage<GetArtistsResponse> {
    private static readonly pb::MessageParser<GetArtistsResponse> _parser = new pb::MessageParser<GetArtistsResponse>(() => new GetArtistsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetArtistsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MusicMicroservice.ArtistEntitiesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArtistsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArtistsResponse(GetArtistsResponse other) : this() {
      artists_ = other.artists_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetArtistsResponse Clone() {
      return new GetArtistsResponse(this);
    }

    /// <summary>Field number for the "artists" field.</summary>
    public const int ArtistsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MusicMicroservice.ArtistMessage> _repeated_artists_codec
        = pb::FieldCodec.ForMessage(10, global::MusicMicroservice.ArtistMessage.Parser);
    private readonly pbc::RepeatedField<global::MusicMicroservice.ArtistMessage> artists_ = new pbc::RepeatedField<global::MusicMicroservice.ArtistMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MusicMicroservice.ArtistMessage> Artists {
      get { return artists_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetArtistsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetArtistsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!artists_.Equals(other.artists_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= artists_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      artists_.WriteTo(output, _repeated_artists_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += artists_.CalculateSize(_repeated_artists_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetArtistsResponse other) {
      if (other == null) {
        return;
      }
      artists_.Add(other.artists_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            artists_.AddEntriesFrom(input, _repeated_artists_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArtistMessage : pb::IMessage<ArtistMessage> {
    private static readonly pb::MessageParser<ArtistMessage> _parser = new pb::MessageParser<ArtistMessage>(() => new ArtistMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArtistMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MusicMicroservice.ArtistEntitiesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtistMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtistMessage(ArtistMessage other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      urlPicture_ = other.urlPicture_;
      albums_ = other.albums_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArtistMessage Clone() {
      return new ArtistMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "urlPicture" field.</summary>
    public const int UrlPictureFieldNumber = 3;
    private string urlPicture_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlPicture {
      get { return urlPicture_; }
      set {
        urlPicture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "albums" field.</summary>
    public const int AlbumsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MusicMicroservice.AlbumMessage> _repeated_albums_codec
        = pb::FieldCodec.ForMessage(34, global::MusicMicroservice.AlbumMessage.Parser);
    private readonly pbc::RepeatedField<global::MusicMicroservice.AlbumMessage> albums_ = new pbc::RepeatedField<global::MusicMicroservice.AlbumMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MusicMicroservice.AlbumMessage> Albums {
      get { return albums_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArtistMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArtistMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (UrlPicture != other.UrlPicture) return false;
      if(!albums_.Equals(other.albums_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UrlPicture.Length != 0) hash ^= UrlPicture.GetHashCode();
      hash ^= albums_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UrlPicture.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UrlPicture);
      }
      albums_.WriteTo(output, _repeated_albums_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UrlPicture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlPicture);
      }
      size += albums_.CalculateSize(_repeated_albums_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArtistMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UrlPicture.Length != 0) {
        UrlPicture = other.UrlPicture;
      }
      albums_.Add(other.albums_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            UrlPicture = input.ReadString();
            break;
          }
          case 34: {
            albums_.AddEntriesFrom(input, _repeated_albums_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AlbumMessage : pb::IMessage<AlbumMessage> {
    private static readonly pb::MessageParser<AlbumMessage> _parser = new pb::MessageParser<AlbumMessage>(() => new AlbumMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlbumMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MusicMicroservice.ArtistEntitiesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlbumMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlbumMessage(AlbumMessage other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      urlPicture_ = other.urlPicture_;
      songs_ = other.songs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlbumMessage Clone() {
      return new AlbumMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "urlPicture" field.</summary>
    public const int UrlPictureFieldNumber = 3;
    private string urlPicture_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlPicture {
      get { return urlPicture_; }
      set {
        urlPicture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "songs" field.</summary>
    public const int SongsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MusicMicroservice.SongSimpleMessage> _repeated_songs_codec
        = pb::FieldCodec.ForMessage(34, global::MusicMicroservice.SongSimpleMessage.Parser);
    private readonly pbc::RepeatedField<global::MusicMicroservice.SongSimpleMessage> songs_ = new pbc::RepeatedField<global::MusicMicroservice.SongSimpleMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MusicMicroservice.SongSimpleMessage> Songs {
      get { return songs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlbumMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlbumMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (UrlPicture != other.UrlPicture) return false;
      if(!songs_.Equals(other.songs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UrlPicture.Length != 0) hash ^= UrlPicture.GetHashCode();
      hash ^= songs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (UrlPicture.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UrlPicture);
      }
      songs_.WriteTo(output, _repeated_songs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UrlPicture.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlPicture);
      }
      size += songs_.CalculateSize(_repeated_songs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlbumMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UrlPicture.Length != 0) {
        UrlPicture = other.UrlPicture;
      }
      songs_.Add(other.songs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            UrlPicture = input.ReadString();
            break;
          }
          case 34: {
            songs_.AddEntriesFrom(input, _repeated_songs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SongSimpleMessage : pb::IMessage<SongSimpleMessage> {
    private static readonly pb::MessageParser<SongSimpleMessage> _parser = new pb::MessageParser<SongSimpleMessage>(() => new SongSimpleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SongSimpleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MusicMicroservice.ArtistEntitiesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongSimpleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongSimpleMessage(SongSimpleMessage other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      url_ = other.url_;
      isInLibrary_ = other.isInLibrary_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SongSimpleMessage Clone() {
      return new SongSimpleMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 3;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isInLibrary" field.</summary>
    public const int IsInLibraryFieldNumber = 4;
    private bool isInLibrary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInLibrary {
      get { return isInLibrary_; }
      set {
        isInLibrary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SongSimpleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SongSimpleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Url != other.Url) return false;
      if (IsInLibrary != other.IsInLibrary) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (IsInLibrary != false) hash ^= IsInLibrary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Url);
      }
      if (IsInLibrary != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsInLibrary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (IsInLibrary != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SongSimpleMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.IsInLibrary != false) {
        IsInLibrary = other.IsInLibrary;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Url = input.ReadString();
            break;
          }
          case 32: {
            IsInLibrary = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
