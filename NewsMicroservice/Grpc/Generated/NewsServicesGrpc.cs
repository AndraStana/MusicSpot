// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NewsServices.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NewsMicroservice {
  public static partial class NewsGrpcService
  {
    static readonly string __ServiceName = "NewsGrpcService";

    static readonly grpc::Marshaller<global::NewsMicroservice.GetNewsRequest> __Marshaller_GetNewsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NewsMicroservice.GetNewsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NewsMicroservice.GetNewsResponse> __Marshaller_GetNewsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NewsMicroservice.GetNewsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::NewsMicroservice.GetNewsRequest, global::NewsMicroservice.GetNewsResponse> __Method_GetNews = new grpc::Method<global::NewsMicroservice.GetNewsRequest, global::NewsMicroservice.GetNewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNews",
        __Marshaller_GetNewsRequest,
        __Marshaller_GetNewsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NewsMicroservice.NewsServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of NewsGrpcService</summary>
    [grpc::BindServiceMethod(typeof(NewsGrpcService), "BindService")]
    public abstract partial class NewsGrpcServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::NewsMicroservice.GetNewsResponse> GetNews(global::NewsMicroservice.GetNewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NewsGrpcServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetNews, serviceImpl.GetNews).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NewsGrpcServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetNews, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NewsMicroservice.GetNewsRequest, global::NewsMicroservice.GetNewsResponse>(serviceImpl.GetNews));
    }

  }
}
#endregion
